class CensorContext{args;parent;callback;subject;constructor(t,e){CensorObject.typeCheck(e,"string"),this.parent=t,this.name=e,t instanceof CensorClass?this.subject=t.cls:this.subject=t.object}next(...t){return this.callback(...t)}pass(){return this.next(...this.args)}expandUpon(){var t=new this.constructor(this.parent,this.name);return t.args=this.args??[],t.callback=this.callback??(()=>{}),t}}class CensorCallContext extends CensorContext{next(...t){return this.parent.call(this.name,...t)}}class CensorObject{object;static typeCheck(t,e){if(typeof t!==e)throw new TypeError("Got "+typeof t+" expected "+e)}static getPropertyDescriptor(t,e,n=10){for(var r=0;t.constructor!==Object&&r<=n;){if(t.hasOwnProperty(e))return Object.getOwnPropertyDescriptor(t,e);r+=1,t=Object.getPrototypeOf(t)}return null}constructor(t){CensorObject.typeCheck(t,"object"),this.object=t}call(t,...e){return this.object["_CENSOR_"+t](...e)}getAttr(t){return this.object["_CENSOR_get_"+t]()}setAttr(t,e){this.object["_CENSOR_set_"+t](e)}whenCall(e,n){CensorObject.typeCheck(e,"string"),CensorObject.typeCheck(this.object[e],"function"),CensorObject.typeCheck(n,"function"),this.object.hasOwnProperty("_CENSOR_"+e)||(this.object["_CENSOR_"+e]=this.object[e]);var t,r=new CensorContext(this,e);return r.callback=(...t)=>this.call(e,...t),t="AsyncFunction"===n[Symbol.toStringTag]?async(...t)=>{var e=r.expandUpon();return e.args=t,n(e,...t)}:(...t)=>{var e=r.expandUpon();return e.args=t,n(e,...t)},this.object[e]=t,this}whenAttr(n,r){CensorObject.typeCheck(n,"string"),CensorObject.typeCheck(r,"object");var t=CensorObject.getPropertyDescriptor(this.object,n);this.object["_CENSOR_set_"+n]=t.set,this.object["_CENSOR_get_"+n]=t.get;let s=this,e={};var c=new CensorContext(this,n);return r.hasOwnProperty("get")&&(e.get=()=>{var t=c.expandUpon();return t.args=[],t.callback=()=>s.getAttr(n),r.get(t)}),r.hasOwnProperty("set")&&(e.set=t=>{var e=c.expandUpon();e.args=[t],e.callback=t=>s.setAttr(n,t),r.set(e,t)}),Object.defineProperty(this.object,n,e),this}on(c,a){CensorObject.typeCheck(c,"string"),CensorObject.typeCheck(a,"function");let o=this;var t=this.object["on"+c];this.object.addEventListener;return this.whenAttr("on"+c,{set:(t,n)=>{t.next((...t)=>{var e=new CensorContext(o,c);return e.callback=n??(()=>{}),e.args=t,a(e,...t)})}}),void 0!==t&&(this.object["on"+c]=t),this.whenCall("addEventListener",(t,e,n,r)=>{var s=new CensorContext(o,c);s.callback=n??(()=>{}),t.next(e,(...t)=>(s.args=t,a(s,...t)),r)}),this}}class CensorClass{cls;name;#createHandle;#eventHandles;#callHandles;#attrHandles;constructor(t,e=null,n=window){CensorObject.typeCheck(t,"function"),this.cls=t,this.name=e??t.name,this.#eventHandles={},this.#callHandles={},this.#attrHandles={},null!==n&&(n[this.name]=this.genFunc())}whenCreate(t){return this.#createHandle=t,this}whenCall(t,e){return this.#callHandles[t]=e,this}whenAttr(t,e){return this.#attrHandles[t]=e,this}on(t,e){return this.#eventHandles[t]=e,this}apply(t){var e,n,r,s,c,a,o=new CensorObject(t);for([e,n]of Object.entries(this.#callHandles))o.whenCall(e,n);for([r,s]of Object.entries(this.#attrHandles))o.whenAttr(r,s);for([c,a]of Object.entries(this.#eventHandles))o.on(c,a);return this}genFunc(){let n=this;return function(...t){var e=n.#createHandle?((e=new CensorContext(n,"_CENSOR_create")).args=t,e.callback=(...t)=>new n.cls(...t),n.#createHandle(e,...t)):new n.cls(...t);return n.apply(e),e}}}function censor(t,...e){if("object"==typeof t)return new CensorObject(t,...e);if(t instanceof Object)return new CensorClass(t,...e);throw new TypeError("Can't install censor on "+typeof t)}
