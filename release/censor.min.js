class CensorContext{args;parent;callback;constructor(t,e){CensorObject.typeCheck(e,"string"),this.parent=t,this.name=e}next(...t){return this.callback(...t)}pass(){return this.next(...this.args)}}class CensorCallContext extends CensorContext{next(...t){return this.parent.call(this.name,...t)}}class CensorObject{object;static typeCheck(t,e){if(typeof t!==e)throw new TypeError("Got "+typeof t+" expected "+e)}static getPropertyDescriptor(t,e,n=10){for(var s=0;t.constructor!==Object&&s<=n;){if(t.hasOwnProperty(e))return Object.getOwnPropertyDescriptor(t,e);s+=1,t=Object.getPrototypeOf(t)}return null}constructor(t){CensorObject.typeCheck(t,"object"),this.object=t}call(t,...e){return this.object["_CENSOR_"+t](...e)}getAttr(t){return this.object["_CENSOR_get_"+t]()}setAttr(t,e){this.object["_CENSOR_set_"+t](e)}whenCall(e,n){CensorObject.typeCheck(e,"string"),CensorObject.typeCheck(this.object[e],"function"),CensorObject.typeCheck(n,"function"),this.object.hasOwnProperty("_CENSOR_"+e)||(this.object["_CENSOR_"+e]=this.object[e]);var t,s=new CensorContext(this,e);return s.callback=(...t)=>this.call(e,...t),t="AsyncFunction"===n[Symbol.toStringTag]?async(...t)=>(s.args=t,n(s,...t)):(...t)=>(s.args=t,n(s,...t)),this.object[e]=t,this}whenAttr(e,n){CensorObject.typeCheck(e,"string"),CensorObject.typeCheck(n,"object");var t=CensorObject.getPropertyDescriptor(this.object,e);this.object["_CENSOR_set_"+e]=t.set,this.object["_CENSOR_get_"+e]=t.get;let s=this,r={};var c=new CensorContext(this,e);return n.hasOwnProperty("get")&&(r.get=()=>(c.args=[],c.callback=()=>s.getAttr(e),n.get(c))),n.hasOwnProperty("set")&&(r.set=t=>{c.args=[t],c.callback=t=>s.setAttr(e,t),n.set(c,t)}),Object.defineProperty(this.object,e,r),this}on(c,o){CensorObject.typeCheck(c,"string"),CensorObject.typeCheck(o,"function");let a=this;var t=this.object["on"+c];this.object.addEventListener;return this.whenAttr("on"+c,{set:(t,n)=>{t.next((...t)=>{var e=new CensorContext(a,c);return e.callback=n,e.args=t,o(e,...t)})}}),this.object["on"+c]=t,this.whenCall("addEventListener",(t,e,n,s)=>{var r=new CensorContext(a,c);r.callback=n,t.next(e,(...t)=>(r.args=t,o(r,...t)),s)}),this}}class CensorClass{cls;name;#eventHandles;#callHandles;#attrHandles;constructor(t,e=null,n=window){CensorObject.typeCheck(t,"function"),this.cls=t,this.name=e??t.name,this.#eventHandles={},this.#callHandles={},this.#attrHandles={},null!==n&&(n[this.name]=this.genFunc())}whenCall(t,e){return this.#callHandles[t]=e,this}whenAttr(t,e){return this.#attrHandles[t]=e,this}on(t,e){return this.#eventHandles[t]=e,this}apply(t){var e,n,s,r,c,o,a=new CensorObject(t);for([e,n]of Object.entries(this.#callHandles))a.whenCall(e,n);for([s,r]of Object.entries(this.#attrHandles))a.whenAttr(s,r);for([c,o]of Object.entries(this.#eventHandles))a.on(c,o);return this}genFunc(){let e=this;return function(...t){t=new e.cls(...t);return e.apply(t),t}}}function censor(t,...e){if("object"==typeof t)return new CensorObject(t,...e);if(t instanceof Object)return new CensorClass(t,...e);throw new TypeError("Can't install censor on "+typeof t)}
