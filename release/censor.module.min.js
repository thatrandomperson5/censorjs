const{defineProperty:a}=Object;class CensorContext{args;parent;callback;constructor(_,b){CensorObject.typeCheck(b,'string');this.parent=_;this.name=b}next(...B){return this.callback(...B)}pass(){return this.next(...this.args)}}class CensorCallContext extends CensorContext{next(...C){return this.parent.call(this.name,...C)}}class CensorObject{object;#eventHandleCache;static typeCheck(_a,_b){if(typeof _a!==_b)throw TypeError('Got '+typeof _a+' expected '+_b)}static getPropertyDescriptor(d,D,_c=10){var _d=d,e=0;while (d.constructor!==Object&&e<=_c) {if(d.hasOwnProperty(D))return Object.getOwnPropertyDescriptor(d,D);e+=1;d=Object.getPrototypeOf(d)}return null}constructor(_A){CensorObject.typeCheck(_A,'object');this.object=_A;this.#eventHandleCache={}}call(E,..._B){if(!this.object.hasOwnProperty(`_CENSOR_${E}`))throw TypeError(`Unregistered function binding for "${E}"`);return this.object[`_CENSOR_${E}`](..._B)}whenCall(aA,aB){CensorObject.typeCheck(aA,'string');CensorObject.typeCheck(this.object[aA],'function');CensorObject.typeCheck(aB,'function');!this.object.hasOwnProperty(`_CENSOR_${aA}`)&&(this.object[`_CENSOR_${aA}`]=this.object[aA]);var _C=new CensorCallContext(this, aA);var f;aB[Symbol.toStringTag]==='AsyncFunction'?f=async (...aC)=>(_C.args=aC,await aB(_C,...aC)):f=(...aD)=>(_C.args=aD,aB(_C,...aD));this.object[aA]=f;return this}whenAttr(aE,aF){CensorObject.typeCheck(aE,'string');CensorObject.typeCheck(aF,'object');let aG=CensorObject.getPropertyDescriptor(this.object,aE);this.object[`_CENSOR_set_${aE}`]=aG['set'];this.object[`_CENSOR_get_${aE}`]=aG['get'];let _D=this.object;var _e={};aF.hasOwnProperty('get')&&(_e['get']=()=>aF['get'](_D[`_CENSOR_get_${aE}`]()));aF.hasOwnProperty('set')&&(_e['set']=aH=>_D[`_CENSOR_set_${aE}`](aF['set'](aH)));a(this.object,aE,_e);return this}on(aI,aJ){CensorObject.typeCheck(aI,'string');CensorObject.typeCheck(aJ,'function');let aK=this;let aL=this.object.addEventListener;this.#eventHandleCache[aI]=aJ;this.whenAttr(`on${aI}`,{set:internal=>(...aM)=>{var aN=new CensorContext(aK, aI);aN.callback=internal;aN.args=aM;return aJ(aN,...aM)}});this.object.onclick=this.object[`on${aI}`];this.whenCall('addEventListener',(aO,aP,aQ,aR)=>{var _E=new CensorContext(aK, aI);_E.callback=aQ;aO.next(aP,(...aS)=>(_E.args=aS,aJ(_E,...aS)),aR)});return this}}class CensorClass{cls;#eventHandles;#callHandles;#attrHandles;constructor(aT){CensorObject.typeCheck(aT,'function');this.cls=aT;this.#eventHandles=this.#callHandles=this.#attrHandles={}}whenCall(aU,aV){this.#callHandles[aU]=aV;return this}whenAttr(aW,aX){this.#attrHandles[aW]=aX;return this}on(aY,aZ){this.#eventHandles[aY]=aZ;return this}apply(bA){var c=new CensorObject(bA);for(const[bB,bC] of Object.entries(this.#callHandles))c.whenCall(bB,bC);for(const[bD,bE] of Object.entries(this.#attrHandles))c.whenAttr(bD,bE);for(const[bF,bG] of Object.entries(this.#eventHandles))c.on(bF,bG);return this}genFunc(){let bH=this;return (...bI)=>{var bJ=new bH.cls(...bI);bH.apply(bJ);return bJ}}}function A(bK){if(typeof bK==='object')return new CensorObject(bK);if(bK instanceof Object)return new CensorClass(bK);throw TypeError('Can\'t install censor on '+typeof bK)}export{A as censor,CensorObject};
